/*
 * Configuration file for MetaVirome Pipeline
 */

// Global default parameters
params {
    // Pipeline Options
    reads          = null
    host_genome    = null
    single_end     = false
    
    // Output
    outdir         = "./results"
    
    // Resources
    max_memory     = '128.GB'
    max_cpus       = 16
    max_time       = '240.h'
    
    // Databases
    kraken2_db     = null
    diamond_db     = null
    
    // Tool parameters
    min_contig_len = 1000
    
    // Help
    help           = false
}

// Process-specific resource configuration
process {
    // Default settings
    cpus   = { check_max( 1 * task.attempt, 'cpus' ) }
    memory = { check_max( 7.GB * task.attempt, 'memory' ) }
    time   = { check_max( 4.h * task.attempt, 'time' ) }
    
    // Error handling
    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries    = 3
    maxErrors     = '-1'
    
    // Process-specific settings
    withName: REMOVE_HOST {
        cpus   = { check_max( 8 * task.attempt, 'cpus' ) }
        memory = { check_max( 32.GB * task.attempt, 'memory' ) }
        time   = { check_max( 12.h * task.attempt, 'time' ) }
    }
    
    withName: KRAKEN2 {
        cpus   = { check_max( 8 * task.attempt, 'cpus' ) }
        memory = { check_max( 24.GB * task.attempt, 'memory' ) }
        time   = { check_max( 8.h * task.attempt, 'time' ) }
    }
    
    withName: DIAMOND {
        cpus   = { check_max( 8 * task.attempt, 'cpus' ) }
        memory = { check_max( 16.GB * task.attempt, 'memory' ) }
        time   = { check_max( 12.h * task.attempt, 'time' ) }
    }
    
    withName: METASPADES {
        cpus   = { check_max( 16 * task.attempt, 'cpus' ) }
        memory = { check_max( 64.GB * task.attempt, 'memory' ) }
        time   = { check_max( 48.h * task.attempt, 'time' ) }
    }
    
    withName: VIRSORTER2 {
        cpus   = { check_max( 12 * task.attempt, 'cpus' ) }
        memory = { check_max( 32.GB * task.attempt, 'memory' ) }
        time   = { check_max( 24.h * task.attempt, 'time' ) }
    }
    
    withName: CHECKV {
        cpus   = { check_max( 8 * task.attempt, 'cpus' ) }
        memory = { check_max( 16.GB * task.attempt, 'memory' ) }
        time   = { check_max( 12.h * task.attempt, 'time' ) }
    }
    
    withName: PHAROKKA {
        cpus   = { check_max( 8 * task.attempt, 'cpus' ) }
        memory = { check_max( 16.GB * task.attempt, 'memory' ) }
        time   = { check_max( 12.h * task.attempt, 'time' ) }
    }
    
    withName: VCONTACT2 {
        cpus   = { check_max( 12 * task.attempt, 'cpus' ) }
        memory = { check_max( 32.GB * task.attempt, 'memory' ) }
        time   = { check_max( 24.h * task.attempt, 'time' ) }
    }
}

// Container configuration
// Uncomment one of these sections to enable container usage

// Docker configuration
// docker {
//     enabled = true
//     temp = 'auto'
// }

// Singularity configuration
// singularity {
//     enabled = true
//     autoMounts = true
// }

// Conda configuration
// conda {
//     enabled = true
//     cacheDir = "$HOME/.conda"
// }

// Executor configuration - Customize based on your environment
// executor {
//     name = 'slurm'
//     queueSize = 100
//     submitRateLimit = '10 sec'
// }

// Profiles configuration
profiles {
    standard {
        process.executor = 'local'
    }
    
    // Example HPC configuration with Slurm
    hpc {
        process.executor = 'slurm'
        process.queue = 'normal'
        process.clusterOptions = '--account=project123'
    }
    
    // Cloud configuration for AWS Batch
    awsbatch {
        process.executor = 'awsbatch'
        process.queue = 'nextflow-batch-queue'
        aws.region = 'us-east-1'
        aws.batch.cliPath = '/home/ec2-user/miniconda/bin/aws'
    }
}

// Function to check max resources
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "WARNING: Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "WARNING: Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "WARNING: Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

// Manifest with pipeline information
manifest {
    name            = 'MetaVirome Pipeline'
    author          = 'Generated by Claude'
    homePage        = 'https://github.com/your-username/metavirome'
    description     = 'Nextflow pipeline for virus detection in metagenomes'
    mainScript      = 'metavirome.nf'
    nextflowVersion = '>=20.04.0'
    version         = '1.0.0'
}

// Print execution summary when pipeline finishes
workflow.onComplete {
    log.info"""
    Pipeline execution summary
    --------------------------
    Completed at : ${workflow.complete}
    Duration     : ${workflow.duration}
    Success      : ${workflow.success}
    workDir      : ${workflow.workDir}
    exit status  : ${workflow.exitStatus}
    """
}
